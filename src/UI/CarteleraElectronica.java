/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package UI;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import observador.IObservador;
import observador.Observable;
import parkingsystem.Entidad.Parking;
import parkingsystem.Entidad.Tarifa;
import parkingsystem.Entidad.eventos;
import parkingsystem.Fachada;

/**
 *
 * @author Embrono
 */
public class CarteleraElectronica extends javax.swing.JDialog implements IObservador {

    /**
     * Creates new form CarteleraElectronica
     */
    private Parking parking;

    public CarteleraElectronica(java.awt.Frame parent, boolean modal, Parking p) {
        super(parent, modal);
        parking = p;
        Fachada.getInstancia().agregarObservador(this);
        initComponents();
        DibujarTarifas();
        DibujarDisponibilidad();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelDisponibilidad = new javax.swing.JLabel();
        jLabelDisponibilidadValue = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableDisponibilidad = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableListado = new javax.swing.JTable();
        jButtonCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Caterlera Electronica");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelDisponibilidad.setText("Disponibilidad:");

        jLabelDisponibilidadValue.setText("jLabel1");

        jScrollPane1.setViewportView(jTableDisponibilidad);

        jTableListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tipo de vehiculo", "Precio/<UT>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableListado);
        if (jTableListado.getColumnModel().getColumnCount() > 0) {
            jTableListado.getColumnModel().getColumn(0).setResizable(false);
            jTableListado.getColumnModel().getColumn(1).setResizable(false);
        }

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCerrarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelDisponibilidad)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelDisponibilidadValue, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonCerrar)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 26, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDisponibilidad)
                    .addComponent(jLabelDisponibilidadValue))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jButtonCerrar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCerrarMouseClicked
        // TODO add your handling code here:
        Fachada.getInstancia().quitarObservador(this);
        this.dispose();
    }//GEN-LAST:event_jButtonCerrarMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        Fachada.getInstancia().quitarObservador(this);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarteleraElectronica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarteleraElectronica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarteleraElectronica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarteleraElectronica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JLabel jLabelDisponibilidad;
    private javax.swing.JLabel jLabelDisponibilidadValue;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDisponibilidad;
    private javax.swing.JTable jTableListado;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar(Object evento, Observable origen) {
        if (evento.equals(eventos.CAMBIO_DE_TARIFA)) {
            DibujarTarifas();
        } else if (evento.equals(eventos.EGRESO) || evento.equals(eventos.INGRESO)) {
            DibujarDisponibilidad();
        }
    }

    private void DibujarTarifas() {
        ArrayList<Tarifa> tarifario = parking.getTarifas();
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Tipo de Vehiculo");
        model.addColumn("Precio/<UT>");
        model.setRowCount(tarifario.size());

        int fila = 0;
        for (Tarifa a : tarifario) {
            model.setValueAt(a.getTipo().toString(), fila, 0);
            model.setValueAt(Math.round(a.getPrecio() * 100.0) / 100.0, fila, 1);
            fila++;
        }
        jTableListado.setModel(model);
    }

    private void DibujarDisponibilidad() {
        DibujarTablaDisponibilidad();
        MostrarDisponibilidad();

    }

    private void DibujarTablaDisponibilidad() {
        var cocheras = parking.getCocheras();
        var etiquetas = Fachada.getInstancia().getEtiquetas();
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Cocheras");
        model.addColumn("Disponibilidad");
        for (var etiqueta : etiquetas) {
            int disponibilidad = 0;

            // Contar cuántas cocheras con esta etiqueta están vacías
            for (var cochera : cocheras) {
                if (cochera.getEtiquetas().contains(etiqueta) && !cochera.isOcupada()) {
                    disponibilidad++;
                }
            }
            model.addRow(new Object[]{etiqueta.toString(), disponibilidad});
        }

        // Establecer el modelo en la JTable
        jTableDisponibilidad.setModel(model);
    }

    private void MostrarDisponibilidad() {
        var cocherasDisponibles = parking.getCocheras().stream()
                .filter(c -> !c.isOcupada())
                .count();
        jLabelDisponibilidadValue.setText(String.valueOf(cocherasDisponibles));
    }
}
